---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ include "cluster-config-maps.fullname" . }}
  namespace: kube-system
  labels:
    {{- include "cluster-config-maps.labels" . | nindent 4 }}
spec:
  updateStrategy:
    type: {{ .Values.updateStrategy }}
{{- if eq .Values.updateStrategy "RollingUpdate"}}
    rollingUpdate:
      maxUnavailable: {{ .Values.maxUnavailable }}
{{- end}}
  selector:
    matchLabels:
      {{- include "cluster-config-maps.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "cluster-config-maps.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      priorityClassName: system-node-critical
      serviceAccountName: {{ include "cluster-config-maps.serviceAccountName" . }}
      hostNetwork: true
      containers:
        - name: csi-node-driver-registrar
          image: registry.k8s.io/sig-storage/csi-node-driver-registrar:v2.9.0
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/clusterconfigmaps.indeed.com/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          livenessProbe:
            exec:
              command:
                - /csi-node-driver-registrar
                - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
                - "--mode=kubelet-registration-probe"
            initialDelaySeconds: 30
            timeoutSeconds: 15
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi/
            - name: registration-dir
              mountPath: /registration/
        - name: csi-ccm-plugin
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          args :
            - "--zap-log-level=6"
            - "--endpoint=$(CSI_ENDPOINT)"
            - "--metrics-addr={{ .Values.metrics.addr }}"
          env:
            - name: CSI_ENDPOINT
              value: unix:///csi/csi.sock
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: 0
            runAsGroup: 0
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          volumeMounts:
            - name: plugin-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
            - name: device-dir
              mountPath: /dev
            - mountPath: /csi-ccm-data
              name: csi-data-dir
      volumes:
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: DirectoryOrCreate
        - name: plugin-dir
          hostPath:
            path: /var/lib/kubelet/plugins/clusterconfigmaps.indeed.com
            type: DirectoryOrCreate
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet
            type: Directory
        - name: device-dir
          hostPath:
            path: /dev
            type: Directory
        - name: csi-data-dir
          hostPath:
            path: /mnt/csi-ccm-data
            type: DirectoryOrCreate
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
